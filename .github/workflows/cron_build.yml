---
name: Build NVIDIA GPU Driver container images

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-matrix.outputs.matrix }}
    steps:
      - name: Checkout current repository to get the matrix file
        uses: actions/checkout@v3

      - name: Generate the build matrix
        id: gen-matrix
        run: |
          echo "${PULL_SECRET}" > ${PULL_SECRET_FILE}
          ${GITHUB_WORKSPACE}/build-matrix.sh
          matrix=$(cat ${GITHUB_WORKSPACE}/build-matrix.json)
          echo "::set-output name=matrix::${matrix}"
        env:
          PULL_SECRET: ${{ secrets.PULL_SECRET }}
          PULL_SECRET_FILE: pull-secret

  build-image:
    needs: build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Check if nvidia-gpu-driver image exists for driver ${{ matrix.versions.driver }} and kernel ${{ matrix.versions.kernel }} on ${{ matrix.versions.arch_tag }}
        id: check-existing-image
        continue-on-error: true
        run: |
          TOKEN=$(curl -s -u ${{ secrets.GHCR_USERNAME }}:${{ secrets.GHCR_TOKEN }} 'https://ghcr.io/token?scope="repository:${{ github.repository }}:pull"' | jq -r '.token')
          curl --fail -H "Authorization: Bearer ${TOKEN}" https://${{ env.REGISTRY }}/v2/${{ github.repository }}/manifests/${{ matrix.versions.driver }}-${{ matrix.versions.kernel }}.${{ matrix.versions.arch_tag }}

      - name: Check if base image digest has changed
        id: check-base-image-digest
        if: steps.check-existing-image.outcome == 'success'
        continue-on-error: true
        run: |
          UBI_DIGEST=$( \
            oc image info \
              --filter-by-os ${{ matrix.versions.arch }} -o json \
              ${{ env.REGISTRY }}/${{ github.repository }}:${{ matrix.versions.kernel }} \
            | jq .config.config.Labels[\"org.opencontainers.image.base.digest\"] \
            | sed 's/"//g'
          )
          echo "Previous UBI image digest: ${UBI_DIGEST}"
          echo "Current UBI image digest: ${{ matrix.versions.ubi-digest }}"
          [[ "${UBI_DIGEST}" == "${{ matrix.versions.ubi-digest }}" ]]

      - name: Checkout current repository for the Dockerfiles
        if: |
          steps.check-existing-image.outcome == 'failure' ||
          steps.check-base-image.outcome == 'failure'
        uses: actions/checkout@v3

      - name: Lint Dockerfile
        if: |
          steps.check-existing-image.outcome == 'failure' ||
          steps.check-base-image.outcome == 'failure'
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: ./Dockerfile
          failure-threshold: error

      - name: Set up QEMU
        if: |
          steps.check-existing-image.outcome == 'failure' ||
          steps.check-base-image.outcome == 'failure'
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: |
          steps.check-existing-image.outcome == 'failure' ||
          steps.check-base-image.outcome == 'failure'
        uses: docker/setup-buildx-action@v2

      - name: Login to the container registry
        if: |
          steps.check-existing-image.outcome == 'failure' ||
          steps.check-base-image.outcome == 'failure'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_IO_USERNAME }}
          password: ${{ secrets.GHCR_IO_PASSWORD }}

      - name: Build and push nvidia-gpu-driver:${{matrix.versions.driver }}-${{ matrix.versions.kernel }}.${{ matrix.versions.arch_tag }}
        if: |
          steps.check-existing-image.outcome == 'failure' ||
          steps.check-base-image.outcome == 'failure'
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.versions.driver }}-${{ matrix.versions.kernel }}.${{ matrix.versions.arch_tag }}"
          build-args: |
            "ARCH=${{ matrix.versions.arch_tag }}"
            "BASE_DIGEST=${{ matrix.versions.ubi-digest }}"
            "RHEL_VERSION=${{ matrix.versions.rhel }}"
            "KERNEL_VERSION=${{ matrix.versions.kernel }}"
            "DRIVER_VERSION=${{ matrix.versions.driver }}"
            "CUDA_VERSION=${{ matrix.versions.cuda }}"
            "DRIVER_EPOCH=1"
          secrets: |
            "RHSM_ORG=${{ secrets.RHSM_ORG }}"
            "RHSM_ACTIVATIONKEY=${{ secrets.RHSM_ACTIVATIONKEY }}"
